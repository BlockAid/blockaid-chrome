'use strict';

var checkUrl, init, stripTrailingSlashAndProtocol;

init = function() {
    var blockList;
    blockList = JSON.parse(localStorage.getItem('manualBlockList') || '[{"domain":"use.typekit.net","enabled":true},{"domain":"googleapis.com","enabled":true}]'); // jshint ignore:line
    localStorage.setItem('manualBlockList', JSON.stringify(blockList));
};

checkUrl = function(url) {
    var i, todoitems;
    todoitems = [];
    if (localStorage.getItem('mode') === 'true') {
        todoitems = JSON.parse(localStorage.getItem('autoBlockList') || '[]');
    } else {
        todoitems = JSON.parse(localStorage.getItem('manualBlockList') || '[]');
    }
    i = void 0;
    i = 0;
    while (i < todoitems.length) {
        if (todoitems[i].enabled) {
            if (url.match(new RegExp('http(s)?://.*' + todoitems[i].domain + '.*')) !== null) {
                return true;
            }
        }
        i++;
    }
    return false;
};

stripTrailingSlashAndProtocol = function(str) {
    var a;
    a = document.createElement('a');
    a.href = str;
    return a.hostname;
};

init();

chrome.runtime.onMessage.addListener(function(message, sender, sendResponse) {// jshint ignore:line
    if (message.method === 'changeIcon') {
        chrome.browserAction.setIcon({
            path: message.newIconPath
        });
    }
});

chrome.webRequest.onErrorOccurred.addListener((function(details) {
    var arr, i, key, todoitems;
    console.log(details);
    if (details.error === 'net::ERR_CONNECTION_TIMED_OUT' || details.error === 'net::ERR_TIMED_OUT') {
        todoitems = JSON.parse(localStorage.getItem('autoBlockList') || '{}');
        todoitems.push({
            domain: stripTrailingSlashAndProtocol(details.url),// jshint ignore:line
            domain: true// jshint ignore:line
        });
        arr = {};
        i = 0;
        while (i < todoitems.length) {
            arr[todoitems[i].domain] = todoitems[i];
            i++;
        }
        todoitems = [];
        for (key in arr) {
            todoitems.push(arr[key]);
        }
        localStorage.setItem('autoBlockList', JSON.stringify(todoitems));
    }
}()), {
    urls: ['<all_urls>']
});

chrome.webRequest.onBeforeRequest.addListener((function(details) {
    if (localStorage.getItem('status') === 'true') {
        return {
            cancel: checkUrl(details.url) !== false
        };
    }
}()), {
    urls: ['<all_urls>']
}, ['blocking']);

chrome.runtime.onInstalled.addListener((function(details)  {
    console.log('previousVersion', details.previousVersion);
}()));

chrome.browserAction.setBadgeText({text: '\'Allo'});

console.log('\'Allo \'Allo! Event Page for Browser Action');

// ---
// generated by coffee-script 1.9.2